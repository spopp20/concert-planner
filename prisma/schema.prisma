// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "../src/zod" // (default) the directory where generated zod schemas will be saved
  relationModel            = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model
  modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)
  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas
  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "sqlite" // NOTE: sqlite does not work with NextAuth.js
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id            String    @id @default(cuid())
  name          String
  active        Int
  description   String?
  venue         String?
  location      String?
  notes         String?
  telephone     String?
  startDateTime DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  songs         Song[]
}

model Instrument {
  id          String   @id @default(cuid())
  name        String
  active      Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  songs       Song[]
}

model Song {
  id           String      @id @default(cuid())
  title        String
  active       Int
  alias        String?
  startKey     String?
  tempoCd      Int
  startWords   String?
  arrangement  String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Event        Event?      @relation(fields: [eventId], references: [id])
  eventId      String?
  Instrument   Instrument? @relation(fields: [instrumentId], references: [id])
  instrumentId String?
}
